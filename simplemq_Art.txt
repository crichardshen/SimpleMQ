SimpleMQ 架构设计文档
==================

1. 系统概述
-----------------
SimpleMQ 是一个轻量级的消息队列系统，采用主从架构设计，具有高可用性和可靠性。系统支持多种消息分发策略，提供实时消息处理能力，并具备完整的消息存储和监控机制。

2. 核心特性
-----------------
- 主从高可用架构
- 智能消息分发
- 实时消息处理
- 本地化存储
- 全方位监控

3. 系统架构
-----------------
3.1 整体架构
SimpleMQ 采用主从（Master-Slave）架构，由两个完全相同的节点组成：
- 主节点（如：1a）
  * 职责：处理所有消息的接收和分发
  * 原理：通过 active 标志控制消息处理权限
  * 优势：单点处理避免数据一致性问题
  * 风险：性能瓶颈，需要合理控制消息量

- 从节点（如：2a）
  * 职责：作为热备，监控主节点状态
  * 原理：实时接收心跳，保持就绪状态
  * 优势：零数据丢失的故障转移
  * 风险：心跳延迟可能导致误判

- 自动故障转移机制
  * 工作原理：
    - 类似人体的"双保险"机制
    - 主节点每5秒向从节点发送一次"我还活着"的信号（心跳）
    - 从节点会记录主节点最后一次"报平安"的时间
    - 如果连续15秒（3次）都没收到主节点的信号，从节点就会认为主节点出现故障
   
  * 故障处理流程：
    1. 发现阶段：从节点发现主节点可能出现故障
    2. 确认阶段：
       - 第一重检查：心跳计数器
         * 必须连续3次（15秒）没有收到心跳才会触发确认流程
         * 避免因为网络抖动导致的临时心跳丢失
       
       - 第二重检查：主节点状态验证
         * 检查主节点最后一次发送的状态信息：
           - 心跳包中包含节点当前状态（RUNNING/STARTING/STOPPING/STOPPED）
           - 包含节点当前角色（MASTER/SLAVE）
           - 包含关键运行指标（CPU使用率、内存使用率等）
         
         * 状态判断逻辑：
           - 如果状态是 STOPPING 或 STOPPED：说明是正常关闭，不触发切换
           - 如果状态是 STARTING：说明节点正在启动，等待启动完成
           - 如果状态是 RUNNING 但指标异常：可能是节点过载，需要切换
           - 如果最后状态是 RUNNING 且指标正常：
             * 需要结合最后心跳时间综合判断
             * 如果最后心跳时间在15秒内：可能是网络临时问题，继续观察
             * 如果最后心跳时间超过15秒：
               - 说明节点可能发生了突发宕机
               - 或者节点与网络完全断开
               - 这种情况下才考虑触发切换
       
       - 第三重检查：网络连通性测试
         * 尝试通过备用通道（如：TCP端口）连接主节点
         * 确认是否真的无法连接主节点
       
       - 第四重检查：运行时间对比
         * 检查主从节点的运行时间
         * 避免刚重启的节点误判为主节点
     3. 接管阶段：从节点升级为新的主节点
     4. 恢复阶段：原主节点恢复后，自动降级为从节点
   
  * 优势：
    - 无需人工干预，系统自动完成故障转移
    - 故障恢复时间短，通常在秒级完成
    - 服务不会中断，用户无感知
   
  * 风险和解决方案：
    - 风险1：网络抖动可能导致误判
      解决：采用多次确认机制，避免因临时网络问题导致误判
    
    - 风险2：两个节点同时认为自己是主节点（脑裂）
      解决：使用节点优先级和运行时间判断，确保同一时刻只有一个主节点
    
    - 风险3：频繁切换影响系统稳定性
      解决：增加切换冷却时间，防止短时间内频繁切换

3.2 核心组件
a) 消息处理层
- SimpleMQBroker
  * 核心功能：消息代理，负责消息的接收和分发
  * 实现原理：
    - 采用单例模式设计
      * 确保每个节点只有一个 Broker 实例
    * 使用 Spring 容器管理单例
    * 工作职责：
      - 整体流程协调
        * 接收生产者消息
        * 管理订阅关系
        * 调度处理流程
      - 系统管理
        * 监控组件状态
        * 资源分配
        * 系统配置
    * 优势：
      - 灵活的消息处理机制
      - 良好的性能和可扩展性
      - 资源统一管理
      - 状态维护一致性
  * 风险：
    - 需要合理配置线程池参数
    - 消息堆积可能影响性能
    - 单例可能成为性能瓶颈
    - 需要注意并发控制

- MessageProcessor
  * 核心功能：消息处理器，确保消息的可靠处理
  * 实现原理：
    - 前置处理
      * 消息格式验证
      * 消息解码
      * 格式转换
    - 核心处理
      * 业务逻辑处理
      * 消息内容加工
      * 消息转换/富化
    - 异步处理机制
      * 使用线程池处理消息
      * 支持并行处理
      * 处理超时控制
  * 优势：
    - 提高系统吞吐量
    - 专注于消息内容处理
    - 灵活的消息加工机制
    - 可扩展的处理流程
  * 风险：
    - 异步处理可能导致消息顺序变化
    - 处理逻辑复杂度增加
    - 需要考虑处理性能

- Dispatcher
  * 核心功能：消息分发器，支持多种分发策略
  * 实现原理：
    - 策略模式实现不同分发算法
    - 消费者注册和注销机制
    - 分发管理
      * 消息分发策略执行
      * 消费者选择和管理
      * 消息队列映射维护
    - 状态管理
      * 消息投递状态确认机制
        - ACK：消费者成功处理消息后发送确认
        - NACK：消费者处理失败时发送拒绝
        - 超时：在指定时间内未收到确认
      * 消息状态跟踪
        - DELIVERING：消息正在投递中
        - DELIVERED：消息已成功投递并确认
        - FAILED：投递失败或被拒绝
        - TIMEOUT：投递超时
      * 重试机制
        - 失败自动重试
        - 可配置重试次数和间隔
        - 超过重试限制进入死信队列
    - 后续处理
      * 消费者回调通知
      * 失败重试处理
      * 死信处理
  * 优势：
    - 完整的消息投递保证
    - 灵活的分发策略支持
    - 可靠的状态管理
    - 完善的异常处理
  * 风险：
    - 策略切换可能影响正在处理的消息
    - 状态同步的复杂性
    - 需要处理各种异常场景
    - 重试策略的合理性

b) 存储层
- JsonFileMessageStorage
  * 核心功能：基于 JSON 文件的消息存储
  * 实现原理：
    - 按日期分目录存储消息
    - 使用读写锁保证并发安全
    - 支持消息批量写入
  * 优势：
    - 无需外部依赖
    - 便于查看和维护
    - 支持按时间范围查询
  * 风险：
    - 文件IO可能成为性能瓶颈
    - 需要定期清理过期数据

- MessageBatch
  * 核心功能：消息批处理机制
  * 实现原理：
    - 消息缓存队列
    - 定时或定量触发批量写入
    - 异步处理机制
  * 优势：
    - 提高写入性能
    - 减少磁盘IO
  * 风险：
    - 可能存在短暂的数据丢失风险
    - 内存占用需要控制

- StorageMaintenanceTask
  * 核心功能：存储维护任务
  * 实现原理：
    - 快照机制
      * 通过 Spring @Scheduled 实现定时任务
      * 每小时创建一次系统快照
      * 快照内容包含：
        - 当前所有消息的状态
        - 消息队列的状态
        - 消费者订阅关系
      * 快照存储格式：
        - 按时间命名：YYYY-MM-DD-HH.json
        - 存储路径：data/snapshots/
    - 自动清理过期数据
      * 每天凌晨执行清理
      * 默认保留最近7天数据
      * 清理范围包括消息和快照
    - 文件合并优化
  * 优势：
    - 自动化维护
    - 优化存储空间
    - 支持系统状态回溯
    - 便于问题诊断
  * 风险：
    - 维护过程可能影响性能
    - 需要合理配置维护时间
    - 快照可能占用较大存储空间
    - 需要平衡快照频率和存储开销

c) 心跳监控层
- HeartbeatSender
  * 核心功能：心跳发送器
  * 实现原理：
    - 使用 Java DatagramSocket 实现 UDP 通信
      * DatagramSocket 是 Java 提供的 UDP 实现
      * 面向无连接的通信方式
      * 不需要建立连接即可发送数据
    - 定时调度机制（每5秒发送一次）
    - 心跳包内容：
      * 节点状态信息
      * 时间戳
      * 节点标识
  * 优势：
    - UDP 协议开销小
      * 无需建立连接
      * 无需维护连接状态
    - 实时性好
      * 无连接建立延迟
      * 无断开连接开销
    - 适合频繁的心跳检测
  * 风险：
    - UDP 包可能丢失
    - 需要处理网络抖动

- HeartbeatReceiver
  * 核心功能：心跳接收器
  * 实现原理：
    - 使用 Java DatagramSocket 接收 UDP 数据
      * 与发送端使用相同的 DatagramSocket 机制
      * 在指定端口监听 UDP 数据包
      * 支持异步非阻塞接收
    - 异步接收机制
    - 心跳处理：
      * 解析心跳包内容
      * 更新节点状态
      * 检测超时情况
  * 优势：
    - 及时发现节点异常
    - 支持动态配置
  * 风险：
    - 可能出现误判
    - 需要处理网络异常

- FailureDetector
  * 核心功能：故障检测器
  * 实现原理：
    - 基于心跳超时计数
    - 角色切换决策
    - 节点优先级判断
  * 优势：
    - 准确的故障判定
    - 自动化故障处理
  * 风险：
    - 网络分区导致脑裂
    - 频繁切换影响稳定性

4. 关键机制
-----------------
4.1 高可用机制
- 心跳检测：节点间每 5 秒进行一次心跳
- 故障判定：连续 3 次心跳超时判定节点故障
- 自动接管：从节点检测到主节点故障后自动接管
- 优雅降级：原主节点恢复后自动降级为从节点

4.2 消息分发策略
支持多种消息分发策略：
- 顺序分发（ORDERED）：确保消息按顺序处理
- 轮询分发（ROUND_ROBIN）：均衡负载
- 优先级分发（PRIORITY）：支持消费者优先级
- 负载均衡（LOAD_BALANCE）：根据消费者负载动态分发

4.3 存储机制
- 按日期组织：消息按天分目录存储
- JSON格式：便于查看和管理
- 定时快照：每小时创建系统快照
- 自动清理：自动清理过期数据

4.4 监控机制
- 节点状态监控：实时监控节点运行状态
- 心跳监控：监控节点间通信质量
- 切换事件监控：记录角色切换历史
- 性能指标监控：监控系统关键指标

5. 业务价值
-----------------
5.1 高可用性
- 主从架构确保服务不中断
- 毫秒级故障检测
- 秒级服务切换
- 自动故障恢复

5.2 可靠性
- 消息持久化存储
- 消息处理确认机制
- 完整的监控告警

5.3 易用性
- REST API 接口
- WebSocket 实时通信
- 灵活的配置选项
- 简单的部署方式

5.4 可维护性
- 完整的监控指标
- 详细的日志记录
- 便于问题诊断
- 支持在线查看历史消息

6. 扩展性
-----------------
系统设计充分考虑了未来的扩展需求：
- 支持添加新的分发策略
- 支持扩展存储方式
- 支持添加新的监控指标
- 预留集群扩展接口

7. 部署建议
-----------------
- 建议部署在两台配置相同的服务器
- 推荐配置：
  * CPU: 4核以上
  * 内存: 8GB以上
  * 磁盘: SSD 200GB以上
- 网络要求：
  * 主从节点间网络延迟 < 50ms
  * 带宽 >= 100Mbps

这个架构设计充分考虑了系统的可用性、可靠性和可维护性，能够满足大多数业务场景的消息队列需求。系统的主从架构确保了服务的高可用性，而完善的监控机制则保证了系统的可维护性。 