ActiveMQ（Apache ActiveMQ）是一个开源的消息中间件，基于 JMS（Java Message Service）规范实现，支持点对点（Queue）和发布/订阅（Topic）两种消息模型。它的基本架构可以分为以下几个核心组件：

---

### 1. **Broker（消息代理）**
   - **Broker** 是 ActiveMQ 的核心组件，负责接收、存储、路由和分发消息。
   - 它管理消息的传递，确保消息从生产者发送到消费者。
   - Broker 可以独立运行，也可以嵌入到应用程序中。

---

### 2. **Transport Connectors（传输连接器）**
   - Transport Connectors 是 Broker 与客户端（生产者和消费者）之间的通信桥梁。
   - 支持多种协议，例如：
     - **OpenWire**：ActiveMQ 的默认协议，高性能且支持复杂特性。
     - **STOMP**：简单文本协议，适合跨语言通信。
     - **AMQP**：高级消息队列协议，支持跨平台。
     - **MQTT**：轻量级协议，适合物联网场景。
     - **WebSockets**：基于 Web 的实时通信。
   - 示例配置：
     ```xml
     <transportConnectors>
         <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/>
         <transportConnector name="stomp" uri="stomp://0.0.0.0:61613"/>
     </transportConnectors>
     ```

---

### 3. **Network Connectors（网络连接器）**
   - 用于连接多个 Broker，实现分布式消息传递和负载均衡。
   - 支持两种模式：
     - **静态网络**：手动配置 Broker 之间的连接。
     - **动态网络**：通过组播（Multicast）自动发现 Broker。
   - 示例配置：
     ```xml
     <networkConnectors>
         <networkConnector uri="static:(tcp://broker1:61616,tcp://broker2:61616)"/>
     </networkConnectors>
     ```

---

### 4. **消息存储（Persistence）**
   - ActiveMQ 提供多种消息存储机制，确保消息的可靠性和持久化：
     - **KahaDB**：默认的持久化存储，基于文件的高性能存储引擎。
     - **JDBC**：将消息存储到关系型数据库（如 MySQL、PostgreSQL）。
     - **LevelDB**：基于本地文件的高性能存储（已逐渐被 KahaDB 取代）。
     - **Memory**：将消息存储在内存中，性能最高，但消息不持久化。
   - 示例配置（KahaDB）：
     ```xml
     <persistenceAdapter>
         <kahaDB directory="${activemq.data}/kahadb"/>
     </persistenceAdapter>
     ```

---

### 5. **消息模型**
   - ActiveMQ 支持两种消息模型：
     1. **点对点（Queue）**：
        - 消息发送到队列，只有一个消费者可以消费该消息。
        - 适用于任务分发、负载均衡场景。
     2. **发布/订阅（Topic）**：
        - 消息发送到主题，所有订阅该主题的消费者都会收到消息。
        - 适用于广播、事件通知场景。

---

### 6. **消费者与生产者**
   - **生产者（Producer）**：创建并发送消息到 Broker。
   - **消费者（Consumer）**：从 Broker 接收并处理消息。
   - 支持同步和异步两种消费模式。

---

### 7. **Advisory Messages（通知消息）**
   - ActiveMQ 提供了一种特殊的通知机制，用于监控系统状态。
   - 例如，可以监控队列的创建、消费者的连接、消息的堆积等。
   - 这些通知消息会被发送到特定的 Advisory Topic 中。

---

### 8. **安全性**
   - ActiveMQ 支持基于 JAAS 的用户认证和授权。
   - 可以配置 SSL/TLS 加密传输，确保消息的安全性。
   - 示例配置：
     ```xml
     <plugins>
         <jaasAuthenticationPlugin configuration="activemq"/>
         <authorizationPlugin>
             <map>
                 <authorizationMap>
                     <authorizationEntries>
                         <authorizationEntry queue=">" read="admins" write="admins" admin="admins"/>
                     </authorizationEntries>
                 </authorizationMap>
             </map>
         </authorizationPlugin>
     </plugins>
     ```

---

### 9. **监控与管理**
   - **Web 控制台**：通过浏览器访问 ActiveMQ 的管理界面，查看队列、主题、连接等信息。
   - **JMX**：通过 Java Management Extensions 监控和管理 Broker。
   - **Advisory Messages**：通过订阅通知消息实现自定义监控。

---

### 10. **高可用与集群**
   - ActiveMQ 支持多种高可用方案：
     - **Master-Slave**：主从模式，主节点故障时从节点接管。
     - **Network of Brokers**：多个 Broker 组成网络，实现负载均衡和故障转移。
     - **Shared Storage**：基于共享存储（如 NFS、JDBC）实现高可用。

---

### 总结
ActiveMQ 的基本架构围绕 Broker 展开，通过 Transport Connectors 实现与客户端的通信，通过 Network Connectors 实现分布式部署，通过消息存储机制确保消息的可靠性，同时提供丰富的监控和管理功能。它的灵活性和可扩展性使其成为企业级消息中间件的热门选择。

如果你有更具体的问题或需要深入探讨某个方面，请随时告诉我！